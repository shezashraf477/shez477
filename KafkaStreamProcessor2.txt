
import java.util.Properties;
import java.util.concurrent.CompletableFuture;

@Component
public class KafkaStreamsProcessor {

    @Value("${spring.kafka.bootstrap-servers}")
    private String bootstrapServers;

    @Value("${kafka.application-id}")
    private String applicationId;

    @Value("${kafka.input-topic}")
    private String inputTopic;

    @Value("${kafka.output-topic}")
    private String outputTopic;

    private final MarketDataProvider marketDataProvider;

    public KafkaStreamsProcessor(MarketDataProvider marketDataProvider) {
        this.marketDataProvider = marketDataProvider;
    }

    public Topology buildTopology() {
        StreamsBuilder builder = new StreamsBuilder();

        // Create a KTable from the input topic
        KTable<String, String> kTable = builder.table(inputTopic, Consumed.with(Serdes.String(), Serdes.String()));

        // Transform values asynchronously and update the KTable
        kTable.transformValues(new AsyncTransformerSupplier(marketDataProvider), "market-data-store")
                .toStream()
                .to(outputTopic);

        return builder.build();
    }

    public Properties getStreamProperties() {
        Properties props = new Properties();
        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);
        props.put(StreamsConfig.APPLICATION_ID_CONFIG, applicationId);
        return props;
    }
}
