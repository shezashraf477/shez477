import org.apache.kafka.clients.producer.ProducerRecord;
import org.springframework.kafka.support.SendResult;
import org.springframework.util.concurrent.ListenableFuture;
import org.springframework.util.concurrent.ListenableFutureCallback;

import java.util.Map;

public class KafkaProducerService {

    private final KafkaTemplate<String, Map<String, String>> kafkaTemplate;

    // Autowired constructor
    @Autowired
    public KafkaProducerService(KafkaTemplate<String, Map<String, String>> kafkaTemplate) {
        this.kafkaTemplate = kafkaTemplate;
    }

    // Method using KafkaTemplate
    public void sendMessage(String topic, String key, Map<String, String> valuesMap) {
        ProducerRecord<String, Map<String, String>> record = new ProducerRecord<>(topic, key, valuesMap);

        ListenableFuture<SendResult<String, Map<String, String>>> future = kafkaTemplate.send(record);

        // Use lambda expressions for a more concise callback
        future.addCallback(
                result -> handleSuccess(result),
                ex -> handleFailure(ex)
        );
    }

    private void handleSuccess(SendResult<String, Map<String, String>> result) {
        // Handle success
        System.out.println("Message sent successfully");
        System.out.println("Record Metadata: " + result.getRecordMetadata());
    }

    private void handleFailure(Throwable ex) {
        // Handle failure
        System.err.println("Error sending message: " + ex.getMessage());
    }

    // Other methods...
}
